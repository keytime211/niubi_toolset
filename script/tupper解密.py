from functools import reduce

# tupper自我指涉公式

def Tupper_self_referential_formula():
  k = 636806841748368750477720528895492611039728818913495104112781919263174040060359776171712496606031373211949881779178924464798852002228370294736546700438210687486178492208471812570216381077341015321904079977773352308159585335376746026882907466893864815887274158732965185737372992697108862362061582646638841733361046086053127284900532658885220569350253383469047741742686730128763680253048883638446528421760929131783980278391556912893405214464624884824555647881352300550360161429758833657243131238478311219915449171358359616665570429230738621272988581871
  def f(x, y):
    d = ((-17 * x) - (y % 17))
    e = reduce(lambda x, y: x * y, [2 for x in range(-d)]) if d else 1
    f = ((y // 17) // e)
    g = f % 2
    return 0.5 < g
  for y in range(k + 16, k - 1, -1):
    line = ""
    for x in range(0, 107):
      if f(x, y):
        line += "0"
      else:
        line += " "
    print(line)

if __name__ == '__main__':
  if Tupper_self_referential_formula():
    print(str(Tupper_self_referential_formula()))
